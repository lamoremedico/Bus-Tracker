#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bus:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  console.log(error);

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



//run simulator
var SIMULATOR_PORT = 3001;

var index = 0;
var points = [
  [-83.06240780000002,39.99450840000001],
  [-83.0702019,40.007911],
  [-83.0849648,40.0288303],
  [-83.0891275,40.0475586],
  [-83.0537224,40.0473286],
  [-83.0511475,40.0206474],
  [-83.0588722,39.9960599]
];

setInterval(function(){
  if (index === points.length) {
    index = 0;
  }
  else {
    index++;
  }
},5000)

function handleRequest(request, response){
  response.setHeader('Access-Control-Allow-Origin','*');
  response.setHeader('Content-Type','application/json');
  var text = JSON.stringify(points[index]);
  response.end(text);
}


var server = http.createServer(handleRequest);

//Lets start our server
server.listen(SIMULATOR_PORT, function(){
    //Callback triggered when server is successfully listening. Hurray!
    console.log("Bus position simulator listening on: http://localhost:%s", SIMULATOR_PORT);
});
